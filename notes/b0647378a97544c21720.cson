createdAt: "2018-02-09T23:48:29.973Z"
updatedAt: "2018-02-09T23:48:53.522Z"
type: "SNIPPET_NOTE"
folder: "a70e6c6c246ebd34db24"
title: "Truncate aware tail python"
description: "Truncate aware tail python"
snippets: [
  {
    name: "readfile.py"
    mode: "Python"
    content: '''
      import time
      from os import stat
      from os.path import abspath
      from stat import ST_SIZE
      
      class LogTail:
          def __init__(self, logfile):
              self.logfile = abspath(logfile)
              self.f = open(self.logfile,"r")
              file_len = stat(self.logfile)[ST_SIZE]
              self.f.seek(file_len)
              self.pos = self.f.tell()
          def _reset(self):
              self.f.close()
              self.f = open(self.logfile, "r")
              self.pos = self.f.tell()
          def tail(self):
              while 1:
                  self.pos = self.f.tell()
                  line = self.f.readline()
                  if not line:
                      if stat(self.logfile)[ST_SIZE] < self.pos:
                          self._reset()
                      else:
                          time.sleep(1)
                          self.f.seek(self.pos)
                  else:
                      """print, return or otherwise manipulate
                      the tailed line"""
                      print line
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
